'use client';

import { useEffect, useState } from 'react';
import { db } from '@/firebase';
import { collection, getDocs } from 'firebase/firestore';
import { MainLayout } from '@/app/components/layout/MainLayout';

import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  CategoryScale,
  LinearScale,
  BarElement,
} from 'chart.js';
import { Pie, Bar } from 'react-chartjs-2';

ChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement);

export default function DashboardPage() {
  const [appeals, setAppeals] = useState([]);
  const [aiSummary, setAiSummary] = useState(null);
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchAndAnalyze = async () => {
      try {
        const snapshot = await getDocs(collection(db, 'appeal'));
        const data = snapshot.docs.map(doc => doc.data());
        setAppeals(data);

        // üî¢ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        const countMap = {};
        const locations = [];

        data.forEach(item => {
          const title = item.title?.trim();
          const detail = item.detail?.trim();

          if (title) {
            countMap[title] = (countMap[title] || 0) + 1;
          }
          if (detail) {
            locations.push(detail);
          }
        });

        const prompt = `
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:

1. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
${Object.entries(countMap).map(([k, v]) => `- ${k}: ${v} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`).join('\n')}

2. ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á:
${locations.map((l, i) => `${i + 1}. ${l}`).join('\n')}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{
  "ranked_problems": ["‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°", "‡∏ñ‡∏ô‡∏ô‡∏û‡∏±‡∏á", "‡∏Ç‡∏¢‡∏∞‡∏•‡πâ‡∏ô"],
  "urgent_area": ["‡∏ñ‡∏ô‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏û.‡πÄ‡∏Å‡πà‡∏≤", "‡∏ñ‡∏ô‡∏ô‡∏™‡∏≤‡∏¢‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô", "‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏≠‡∏û‡∏±‡∏Å A ‡∏ã‡∏≠‡∏¢ 5", "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡πÇ‡∏ï‡πâ‡∏£‡∏∏‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏ã‡∏≠‡∏¢‡πÇ‡∏£‡∏á‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á"],
  "solutions": {
    "‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏ß‡∏°": "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡πà‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏•‡∏≠‡∏Å‡∏ó‡πà‡∏≠",
    "‡∏ñ‡∏ô‡∏ô‡∏û‡∏±‡∏á": "‡∏Ñ‡∏ß‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ñ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏∏‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢",
    "‡∏Ç‡∏¢‡∏∞‡∏•‡πâ‡∏ô": "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ñ‡∏±‡∏á‡∏Ç‡∏¢‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏¢‡∏∞‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô"
  }
}
`;

        const res = await fetch('/api/analyze', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ prompt }),
        });

        const result = await res.json();
        let text = result.text?.trim();

        if (text?.startsWith('```json')) {
          text = text.replace(/```json|```/g, '').trim();
        }

        const parsed = JSON.parse(text);
        setAiSummary(parsed);
      } catch (err) {
        console.error('‚ùå ERROR:', err);
        setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    };

    fetchAndAnalyze();
  }, []);

  // üìä Chart ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
  const chartData = (() => {
    const countMap = {};
    appeals.forEach(item => {
      const title = item.title?.trim();
      if (title) countMap[title] = (countMap[title] || 0) + 1;
    });

    const labels = Object.keys(countMap);
    const values = Object.values(countMap);

    return {
      labels,
      datasets: [
        {
          label: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤',
          data: values,
          backgroundColor: ['#f87171', '#60a5fa', '#facc15', '#34d399', '#a78bfa'],
          borderWidth: 1,
        },
      ],
    };
  })();

  return (
    <MainLayout activeMenu="dashboard">
      <div style={{ padding: 30, backgroundColor: '#F9FAFB', minHeight: '100vh' }}>
        <h1 style={{ fontSize: 24, fontWeight: 'bold', marginBottom: 20 }}>
          üìä Dashboard ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        </h1>

        {error && <div style={{ color: 'red' }}>‚ö†Ô∏è {error}</div>}

        {/* ‡∏Å‡∏£‡∏≤‡∏ü */}
        <div style={{ display: 'flex', gap: 30, flexWrap: 'wrap' }}>
          <div style={{ width: '45%', background: '#fff', padding: 20, borderRadius: 10 }}>
            <h3 style={{ marginBottom: 10 }}>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ (Pie)</h3>
            <Pie data={chartData} />
          </div>
          <div style={{ width: '45%', background: '#fff', padding: 20, borderRadius: 10 }}>
            <h3 style={{ marginBottom: 10 }}>‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (Bar)</h3>
            <Bar data={chartData} />
          </div>
        </div>

        {/* AI Summary */}
        {aiSummary && (
          <div
            style={{
              background: '#fff',
              padding: 20,
              borderRadius: 10,
              marginTop: 30,
              boxShadow: '0 0 5px rgba(0,0,0,0.1)',
            }}
          >
            <h2 style={{ fontSize: 18, fontWeight: 'bold' }}>ü§ñ ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢ AI</h2>

            <p style={{ marginTop: 16 }}><strong>üìå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢ (‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö):</strong></p>
            <ol>
              {aiSummary.ranked_problems?.map((item, i) => (
                <li key={i}>{item}</li>
              ))}
            </ol>

            <p style={{ marginTop: 16 }}><strong>üìç ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:</strong></p>
           <ul>
            {aiSummary.urgent_area?.map((item, i) => (
              <li key={i}>‚Ä¢ {item.location} ‚Äî ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {item.problem}</li>
            ))}
          </ul>

            <p style={{ marginTop: 16 }}><strong>üõ† ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô:</strong></p>
            <ul>
              {Object.entries(aiSummary.solutions || {}).map(([problem, solution], i) => (
                <li key={i}>‚Ä¢ <strong>{problem}:</strong> {solution}</li>
              ))}
            </ul>
          </div>
        )}
      </div>
    </MainLayout>
  );
}
